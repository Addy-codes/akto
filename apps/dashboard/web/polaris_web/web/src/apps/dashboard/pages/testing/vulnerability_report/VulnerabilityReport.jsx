import { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { usePDF } from 'react-to-pdf';
import PersistStore from '@/apps/main/PersistStore';
import api from '../api';
import GithubSimpleTable from "@/apps/dashboard/components/tables/GithubSimpleTable";
import { CellType } from "@/apps/dashboard/components/tables/rows/GithubRow"
import { Avatar, Badge, Box, DataTable, Divider, Frame, HorizontalStack, Link, Text, TopBar, VerticalStack } from '@shopify/polaris';
import './styles.css'
import GetPrettifyEndpoint from '@/apps/dashboard/pages/observe/GetPrettifyEndpoint';
import func from "@/util/func";
import SummaryCardInfo from "@/apps/dashboard/components/shared/SummaryCardInfo"

function Category({ index, categoryName, categoryIssues, categoryMap, categoryVsApisCountMap }) {

    console.log("Starts here!")

    console.log(index)
    console.log(categoryName)
    console.log(categoryIssues)
    console.log(categoryMap)
    console.log(categoryVsApisCountMap)

    const summaryInfo = [
        {
            "title": "Total Issues",
            "data": categoryIssues.length
        },
        {
            "title": "APIs Affected",
            "data": categoryVsApisCountMap[categoryName]
        }
    ]

    const categoryDisplayName = categoryMap && categoryMap[categoryName].displayName

    return (
        <div className='category-container'>
            <a name={categoryName}></a>
            <VerticalStack gap="3">
                <Text variant='headingMd'>
                    2.{index + 1} {categoryDisplayName}
                </Text>

                <Text variant='headingSm'>
                    Issues
                </Text>
                <SummaryCardInfo summaryItems={summaryInfo} key="summary"/>

                <VerticalStack gap="2">
                    {categoryIssues.length > 0 && categoryIssues.map((issueDetails, index) => {
                        const name = issueDetails?.name
                        const testName = issueDetails?.testName
                        return (
                            <Link key={index} url={`#${name}`} removeUnderline>
                                <Text variant='bodySm' color='subdued'>
                                    {index + 1}. {testName}
                                </Text>
                            </Link>
                        )
                    })}
                </VerticalStack>

                <Divider />

                <div>
                    {categoryIssues.map((issueDetails, index) => {
                        return (
                            <Issue key={index} issueDetails={issueDetails} index={index} />
                        )
                    })}
                </div>

            </VerticalStack>
        </div>
    )
}

function Issue({ index, issueDetails }) {

    const removeTrailingQuotes = (str) => {
        return str.replace(/['"]+/g, '')
    }

    //const category = issueDetails.category
    const name = issueDetails?.name
    const testName = issueDetails?.testName
    const issueDescription = removeTrailingQuotes(issueDetails?.issueDescription)
    const issueImpact = removeTrailingQuotes(issueDetails?.issueImpact)

    const vulnerableApisCount = issueDetails?.vulnerableTestingRunResults.length
    const vulnerableApis = issueDetails?.vulnerableTestingRunResults.map(vulnerableApi => {
        const { url, method } = vulnerableApi.apiInfoKey
        const testingRunHexId = vulnerableApi.hexId

        const apiDetails = (
            <HorizontalStack align="space-between">
                <GetPrettifyEndpoint method={method} url={url} isNew={false} />
               <Link url={`/dashboard/testing/664db08c796d436d19c01592/result/${testingRunHexId}`} removeUnderline>
                    <Text variant='bodyMd'>See in akto</Text>
                </Link>              
            </HorizontalStack>
        )

        return {
            apiDetailsText: `${method} ${url}`,
            apiDetails: apiDetails,
        }
    })

    const resourceName = {
        singular: 'API',
        plural: 'APIs',
    };


    const apisHeader = `${vulnerableApisCount} ${vulnerableApisCount === 1 ? resourceName.singular : resourceName.plural} affected`
    const headers = [
        {
            text: apisHeader,
            title: apisHeader,
            value: 'apiDetails',
            textValue: 'apiDetailsText'
        }
    ]

    return (
        <div className="issue-container">
            <a name={name}></a>
            <VerticalStack gap="3">
                <Text variant='headingSm'>
                    {index + 1}. {testName}
                </Text>

                <Text variant='bodySm' color='subdued'>
                    {issueDescription}
                </Text>

                <GithubSimpleTable
                    key="table"
                    data={vulnerableApis}
                    resourceName={resourceName}
                    headers={headers}
                    useNewRow={true}
                    condensedHeight={true}
                    hideQueryField={true}
                    headings={headers}
                    hidePagination={true}
                />

                <Text variant='headingXs'>
                    Why is this a problem?
                </Text>

                <Text variant='bodySm' color='subdued'>
                    {issueImpact}
                </Text>

                <Divider />
            </VerticalStack>
        </div>
    )
}

function VulnerabilityReport() {
    const { toPDF, targetRef } = usePDF({ filename: 'page.pdf' });

    // return (
    //     <div>
    //         <button onClick={() => toPDF()}>Download PDF</button>
    //         <div ref={targetRef}>
    //             Content to be generated to PDF
    //         </div>
    //     </div>
    // )

    const params = useParams();
    const testingRunSummaryId = params.summaryId
    const issuesFilter = params.issuesFilter

    const [vulnerableResultsMap, setVulnerableResultsMap] = useState([]);
    //const [dataToCurlObj, setDataToCurlObj] = useState({});
    const [severitiesCount, setSeveritiesCount] = useState({ HIGH: 0, MEDIUM: 0, LOW: 0 });
    const [categoryVsIssuesMap, setCategoryVsIssuesMap] = useState({})
    const [categoryVsApisCountMap, setCategoryVsApisCountMap] = useState({})

    const collectionsMap = PersistStore(state => state.collectionsMap)
    const subCategoryMap = PersistStore(state => state.subCategoryMap)
    const categoryMap = PersistStore(state => state.categoryMap)

    console.log(vulnerableResultsMap)
    console.log(severitiesCount)
    console.log(collectionsMap)
    console.log(subCategoryMap)
    console.log(categoryMap)
    console.log(categoryVsIssuesMap)
    console.log(categoryVsApisCountMap)

    const createVulnerabilityMap = (testingRunResults) => {
        let categoryVsIssuesMap = {}
        let categoryVsApisCountMap = {}
        let issueVsVulMap = {}
        let high = 0
        let medium = 0
        let low = 0
        testingRunResults?.length > 0 && testingRunResults.forEach((testingRun) => {
            let testSubtype = testingRun?.testSubType
            let testInfo = subCategoryMap?.[testSubtype]

            if (!testInfo) {
                return
            }
            let severity = testInfo?.superCategory?.severity?._name
            let severityIndex = 0;
            switch (severity) {
                case 'HIGH':
                    ++high
                    severityIndex = 2
                    break;
                case 'MEDIUM':
                    ++medium
                    severityIndex = 1
                    break;
                case 'LOW':
                    ++low
                    severityIndex = 0
                    break;
                default:
                    break;
            }

            let vulnerabilities = issueVsVulMap[testSubtype]
            if (vulnerabilities === undefined) {
                vulnerabilities = JSON.parse(JSON.stringify(testInfo))
            }
            let vulnerableTestingRunResults = vulnerabilities["vulnerableTestingRunResults"]
            if (vulnerableTestingRunResults === undefined) {
                vulnerableTestingRunResults = []
            }
            vulnerableTestingRunResults.push(testingRun)
            vulnerabilities['vulnerableTestingRunResults'] = vulnerableTestingRunResults
            vulnerabilities['severityIndex'] = severityIndex
            issueVsVulMap[testSubtype] = vulnerabilities
        })
        setSeveritiesCount({ HIGH: high, MEDIUM: medium, LOW: low });

        let localCopy = vulnerableResultsMap
        Object.keys(issueVsVulMap).forEach((testSubtype) => {
            let obj = issueVsVulMap[testSubtype]
            localCopy.push({ category: obj })
        })

        for (const [testSubType, issue] of Object.entries(issueVsVulMap)) {
            const categoryName = issue.superCategory.name

            if (!categoryName) {
                continue
            }

            let issuesList
            if (!categoryVsIssuesMap.hasOwnProperty(categoryName)) {
                issuesList = []
                categoryVsIssuesMap[categoryName] = issuesList
            } else {
                issuesList = categoryVsIssuesMap[categoryName]
            }

            issuesList.push(issue)

            let apisCount = 0
            if (!categoryVsApisCountMap.hasOwnProperty(categoryName)) {
                categoryVsApisCountMap[categoryName] = 0
            } else {
                apisCount = categoryVsApisCountMap[categoryName]
            }

            apisCount += issue.vulnerableTestingRunResults.length
            categoryVsApisCountMap[categoryName] = apisCount
        }

        // let compare = function (a, b) {
        //     let severityA = a[Object.keys(a)[0]]['severityIndex']
        //     let severityB = b[Object.keys(a)[0]]['severityIndex']
        //     return severityB - severityA
        // }
        // localCopy.sort(compare)
        setCategoryVsIssuesMap(categoryVsIssuesMap)
        setCategoryVsApisCountMap(categoryVsApisCountMap)
        setVulnerableResultsMap(localCopy)
    }

    const fetchVulnerableData = async () => {
        let resultsCount = 0;
        let vulnerableTestingRunResults = []
        //let sampleDataVsCurlMap = {}

        if (testingRunSummaryId) {
            while (true) {
                let testingRunCountsFromDB = 0
                await api.fetchVulnerableTestingRunResults(testingRunSummaryId, resultsCount).then((resp) => {
                    vulnerableTestingRunResults = [...vulnerableTestingRunResults, ...resp.testingRunResults]
                    testingRunCountsFromDB = resp.testingRunResults.length
                    //sampleDataVsCurlMap = { ...sampleDataVsCurlMap, ...resp.sampleDataVsCurlMap }
                })
                resultsCount += 50
                if (testingRunCountsFromDB < 50) {
                    //EOF: break as no further documents exists
                    break
                }
            }
        } else if (issuesFilter) {
            while (true) {
                let testingRunCountsFromDB = 0
                let filters = JSON.parse(atob(issuesFilter))
                await issuesApi.fetchVulnerableTestingRunResultsFromIssues(filters, resultsCount).then(resp => {
                    vulnerableTestingRunResults = [...vulnerableTestingRunResults, ...resp.testingRunResults]
                    testingRunCountsFromDB = resp.totalIssuesCount
                    //sampleDataVsCurlMap = { ...sampleDataVsCurlMap, ...resp.sampleDataVsCurlMap }
                })
                resultsCount += 50
                if (testingRunCountsFromDB < 50 || resultsCount >= 1000) {
                    //EOF: break as no further documents exists
                    break
                }
            }
        }
        //setDataToCurlObj(sampleDataVsCurlMap)
        createVulnerabilityMap(vulnerableTestingRunResults)
    }

    useEffect(() => {
        fetchVulnerableData()
    }, [])

    const reportSecondaryMenu = (
        // <div className="header-css">
        //     <Box width="60%">
        //         <HorizontalStack align="space-between">
        //             <Box paddingBlockStart={3}>
        //                 <Avatar size="medium" shape="square" source="/public/akto_colored.svg" customer name='aktoLogo' />
        //             </Box>
        //             <Text variant="headingXl">Akto Vulnerabilities Report</Text>
        //             {/* <button onClick={() => toPDF()}>Download PDF</button> */}
        //         </HorizontalStack>
        //     </Box>
        // </div>
        <div className="header-css" id="report-secondary-menu-container">
            <Box width="100%">
                <HorizontalStack align="space-between">
                    <VerticalStack>
                        <Text variant="headingXs">Org1 API Security Findings</Text>
                        <Text variant="bodySm">19th May, 2024</Text>
                    </VerticalStack>
                    <button onClick={() => toPDF()}>Download PDF</button>
                </HorizontalStack>
            </Box>
        </div>

    )

    const aktoFindingsChildren = []
    const aktoFindingsTableData = [{
        sno: 1,
        categoryDisplayName: "Server Side Request Forgery (SSRF)",
        categoryDisplayNameComp: (
            <Link url={`#SSRF`} removeUnderline>
                <Text variant='bodyMd' color='subdued'>
                    Server Side Request Forgery (SSRF)
                </Text>
            </Link>
        ),
        apisAffected: 2,
        categorySeverity: "HIGH",
        categorySeverityComp: <Badge size="small" status={func.getTestResultStatus("HIGH")}>HIGH</Badge>
    }]
    Object.keys(categoryVsIssuesMap).forEach((categoryName, index) => {
        const categoryDetails = categoryMap[categoryName]
        aktoFindingsChildren.push({
            text: categoryDetails.displayName,
            link: categoryName,
            children: null,
        })

        aktoFindingsTableData.push({
            sno: index + 1,
            categoryDisplayName: categoryDetails.displayName,
            categoryDisplayNameComp: (
                <Link url={`#${categoryName}`} removeUnderline>
                    <Text variant='bodyMd' color='subdued'>
                        {categoryDetails.displayName}
                    </Text>
                </Link>
            ),
            apisAffected: categoryVsApisCountMap[categoryName],
            categorySeverity: categoryDetails.severity._name,
            categorySeverityComp: <Badge size="small" status={func.getTestResultStatus(categoryDetails.severity._name)}>{categoryDetails.severity._name}</Badge>
        })
    })
    const tocList = [
        { text: "Report summary", link: "", children: null },
        { text: "Akto findings", link: "", children: aktoFindingsChildren },
    ]

    const aktoFindingsTableResourceName = {
        singular: 'Akto finding',
        plural: 'Akto findings',
    };

    const aktoFindingsTableHeaders = [
        {
            title: "S.No.",
            value: "sno",
            type: CellType.TEXT
        }, 
        {
            title: "Issue catgory",
            value: "categoryDisplayNameComp",
            textValue: "categoryDisplayName",
        },
        {
            title: "APIs affcted",
            value: "apisAffected",
            type: CellType.TEXT
        },
        {
            title: "Severity",
            value: "categorySeverityComp",
            textValue: "categorySeverity",
        }
    ]

    const reportTopBar = (
        <TopBar secondaryMenu={reportSecondaryMenu} />
    )

    const summaryInfo = [
        {
            "title": "Total Issues",
            "data": vulnerableResultsMap.length
        },
        {
            "title": "High Severity",
            "data": severitiesCount.HIGH 
        },
        {
            "title": "Medium Severity",
            "data": severitiesCount.MEDIUM 
        },
        {
            "title": "Low Severity",
            "data": severitiesCount.LOW 
        },
        {
            "title": "APIs affected",
            "data": Object.values(categoryVsApisCountMap).reduce((acc, count) => acc + count, 0)
        }
    ];

    return (
        <div>
            <Frame topBar={reportTopBar}>
                <div ref={targetRef} id="report-container">
                    <Box background="bg">

                        <div id="toc">
                            <VerticalStack gap="3">
                                <Text variant="headingLg">Table of contents</Text>
                                <VerticalStack gap="2">
                                    <SummaryCardInfo summaryItems={summaryInfo} key="summary"/>
                                    {tocList.map((tocEntry, index) => {
                                        return (
                                            <div key={index}>
                                                <Link key={index} url={`#${tocEntry.link}`} removeUnderline>
                                                    <Text variant='bodyMd' color='subdued'>
                                                        {index + 1}. {tocEntry.text}
                                                    </Text>
                                                </Link>

                                                <div className='toc-children-container'>
                                                    <VerticalStack gap="2">
                                                        {tocEntry.children && tocEntry.children.map((child, index) => {
                                                            return (
                                                                <Link key={index} url={`#${child.link}`} removeUnderline>
                                                                    <Text variant='bodyMd' color='subdued'>
                                                                        {index + 1}. {child.text}
                                                                    </Text>
                                                                </Link>
                                                            )
                                                        })}
                                                    </VerticalStack>
                                                </div>
                                            </div>
                                        )
                                    })}
                                </VerticalStack>
                            </VerticalStack>
                        </div>
                        <Divider />

                        <div id="findings-table">
                            <VerticalStack gap="3">
                                <Text variant="headingLg">Akto findings</Text>
                                <GithubSimpleTable
                                    key="table"
                                    data={aktoFindingsTableData}
                                    resourceName={aktoFindingsTableResourceName}
                                    headers={aktoFindingsTableHeaders}
                                    useNewRow={true}
                                    condensedHeight={true}
                                    hideQueryField={true}
                                    headings={aktoFindingsTableHeaders}
                                    hidePagination={true}
                                />
                            </VerticalStack>
                        </div>
                        <Divider />

                        {Object.keys(categoryVsIssuesMap).length > 0 && Object.keys(categoryVsIssuesMap).map((categoryName, index) => {
                            return (
                                <Category
                                    key={index}
                                    index={index}
                                    categoryName={categoryName}
                                    categoryIssues={categoryVsIssuesMap[categoryName]}
                                    categoryMap={categoryMap}
                                    categoryVsApisCountMap={categoryVsApisCountMap}
                                />
                            )
                        })}
                    </Box>
                </div>
            </Frame>
        </div>
    )
}

export default VulnerabilityReport;